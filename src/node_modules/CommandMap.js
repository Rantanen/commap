
"use strict";

var MapMarker = require('MapMarker');
var EditControls = require('EditControls');
var ContinentLayer = require('ContinentLayer');
var Game = require( 'GamePlanetside2' );

/*global $, L */

var CommandMap = function( model ) {
    this.model = model;

    // Create the map.
    $('#map').remove();
    var mapElement = $('<div id="map">');
    $('#map-layer').append( mapElement );
    this.map = L.map('map', {
        minZoom: 0,
        maxZoom: 5,
        crs: Game.getCRS(),
        zoomControl: false,
        maxBounds: L.latLngBounds([ -0.5, -0.5 ], [ 1.5, 1.5 ])
    }).setView([0.5,0.5], 3);
    this.layerControls = L.control.layers( {}, {}, { collapsed: false }).addTo( this.map );

    this.map.on( 'mousemove', function(e) {
        $('#map-coordinates').text(
            e.latlng.lat + ", " + e.latlng.lng
        );
    });

    // Initialize the members.
    this.playerOverlays = {};
    this.markers = {};

    // Initialize the map itself.
    this.createContinents( model.data.continents );

    for( var i in model.data.players ) {
        var player = model.data.players[i];
        this.updatePlayer( player );
    }

    var self = this;
    this.model.on( 'playerupdated', function( player ) { self.updatePlayer( player ); } );
    this.model.on( 'playerremoved', function( player ) { self.removePlayer( player ); } );
    this.model.on( 'markerupdated', function( marker ) { self.updateMarker( marker ); } );
    this.model.on( 'markerremoved', function( marker ) { self.removeMarker( marker.player, marker.id ); } );
};

CommandMap.prototype.setPlayer = function( player, server ) {
    this.player = player;
    this.server = server;

    if( player ) {
        // Create and add edit controls.
        if( !this.editControls ) {
            this.editControls = new EditControls( this ).addTo( this.map );
        } else {
            this.editControls.update();
        }
    } else {
        this.map.removeControl( this.editControls );
        this.editControls = null;
    }
};

CommandMap.prototype.createContinents = function( continents ) {
    this.continents = {};

    for( var i in continents ) {
        var continent = continents[i];
        var layer = new ContinentLayer( continent );

        if( !this.selectedContinent ) {
            this.selectedContinent = continent;
            layer.addTo( this.map );
        }

        this.layerControls.addBaseLayer( layer, continent );
        this.continents[ continent ] = layer;
        break;
    }
};

CommandMap.prototype.updatePlayer = function( player ) {
    var self = this;
    var overlay = null;
    var updateMarker = {};

    if( this.playerOverlays[ player.id ] ) {
        overlay = this.playerOverlays[ player.id ];
        overlay.eachLayer( function( marker ) {
            if( !player.markers[ marker.id ] ) {
                delete self.markers[ marker.id ];
                overlay.removeLayer( marker );
            }
        });
    }

    if( !overlay ) {
        overlay = L.layerGroup().addTo( this.map );
        if( this.player !== player ) {
            this.layerControls.addOverlay( overlay, player.info.name );
        }
        this.playerOverlays[ player.id ] = overlay;
    } else {
        if( this.player === player ) {
            this.layerControls.removeLayer( overlay );
        }
    }

    for( var m in player.markers ) {
        this.updateMarker( player.markers[ m ] );
    }
};

CommandMap.prototype.removePlayer = function( player ){
    var self = this;
    if( this.playerOverlays[ player.id ] ) {
        var overlay = this.playerOverlays[ player.id ];
        overlay.eachLayer( function( marker ) {
            delete self.markers[ marker.id ];
        });
        this.layerControls.removeLayer( overlay );
        this.map.removeLayer( overlay );
        delete this.playerOverlays[ player.id ];
    }
};

CommandMap.prototype.updateMarker = function( model ) {
    var self = this;
    model.mine = ( this.player && model.player === this.player.id );

    var layer = this.playerOverlays[ model.player ];
    if( !layer ) { return; }

    var marker = null;
    if( this.markers[ model.id ] ) {

        marker = this.markers[ model.id ];
        marker.update( model );

    } else {

        marker = new MapMarker( model ).addTo( layer );
        marker.on('remove', function ( model ) { self.onRemoveMarker( model ); } );
        marker.on('moved', function ( data ) { self.server.updateMarker( data.model ); });
        this.markers[ model.id ] = marker;
    }
};

CommandMap.prototype.onUpdateMarker = function( marker ) {
    this.model.updateMarker( marker );
    this.server.updateMarker( marker );
};

CommandMap.prototype.onRemoveMarker = function( marker ) {
    this.server.removeMarker( marker.player, marker.id );
    this.model.removeMarker( marker.player, marker.id );
};

CommandMap.prototype.onDraw = function( start, end ) {
    this.server.draw( start, end );
    this.draw( start, end );
};

CommandMap.prototype.draw = function( start, end ) {
    var self = this;
    var polyline = L.polyline([ start, end ], { color: 'red', opacity: 1 }).addTo( this.map );
    setTimeout( function () {
        var opacity = 1;
        var interval = setInterval( function () {
            opacity = opacity - 0.25;
            if( opacity <= 0 ) {
                clearInterval( interval );
                self.map.removeLayer( polyline );
            } else {
                polyline.setStyle({ opacity: opacity });
            }
        }, 100 );
    }, 5000);
};

CommandMap.prototype.removeMarker = function( owner, id ) {
    var marker = this.markers[ id ];
    var layer = this.playerOverlays[ owner ];
    layer.removeLayer( marker );
    delete this.markers[ id ];
};

module.exports = CommandMap;
