
"use strict";

var MarkerModel = require('MarkerModel');

var EditControls = L.Control.extend({
    options: {
        position: 'topleft'
    },

    initialize: function ( map ) {
        this.tools = [];
        this.map = map;
    },

    onAdd: function ( map ) {
        this.toolsContainer = L.DomUtil.create( 'div', 'map-controls' );
        var self = this;

        var marker_tools = [
            {
                id: 'place_terran',
                label: 'Terran',
                img: 'tr.png'
            },
            {
                id: 'place_nc',
                label: 'NC',
                img: 'nc.png'
            },
            {
                id: 'place_vanu',
                label: 'Vanu',
                img: 'vs.png'
            }
        ];

        self._addTool( self._createToolBase({ id: 'pan', label: 'Pan', img: 'trident.png' }) );

        $.each( marker_tools, function( k, spec ) {
            var tool = self._createMarkerTool( spec );
            self._addTool( tool );
        });

        var newPlatoonTool = self._createToolBase({ id: 'add_platoon', label: 'New platoon', img: 'trident.png' });
        var platoonNumber = 0;
        newPlatoonTool.activate = function () {
            var name = prompt("Platoon name");
            if( name ) {
                var platoonTool = self._createPlatoonControl( name );
                self.activateTool( platoonTool.id );
                this.toolsContainer.append( newPlatoonTool.button )
            } else {
                self.activateTool( 'pan' );
            }
        };

        this._createPlatoonControl( this.map.player );
        self._addTool( newPlatoonTool );

        var clearAll = self._createToolBase({ id: 'clear_all', label: 'Clear All', img: 'trident.png' });
        clearAll.activate = function () {
            var removables = [];
            for( var i in self.map.markers ) {
                var markerInfo = self.map.markers[ i ];
                if( markerInfo.marker.mine ) removables.push( markerInfo );
            }
            for( var i in removables ) {
                self.map.onRemoveMarker( removables[i].element );
            }
            self.activateTool( 'pan' );
        };
        self._addTool( clearAll );

        self.activateTool( 'pan' );
        return this.toolsContainer;
    },

    _createPlatoonControl: function( name ) {
        var platoonTool = this._createMarkerTool({
            id: 'set_platoon_' + this.map.currentPlayer + ":" + name,
            label: name,
            img: 'trident.png',
            single: true
        });
        this._addTool( platoonTool );
        return platoonTool;
    },
    activateTool: function (id) {
        if( this.selectedTool && this.selectedTool.id == id ) return;
        if( this.selectedTool ) {
            this.selectedTool.button.removeClass( "active" );
            if( this.selectedTool.deactivate ) this.selectedTool.deactivate();
        }

        this.selectedTool = this.tools[ id ];
        this.selectedTool.button.addClass( "active" );
        if( this.selectedTool.activate ) this.selectedTool.activate();
    },

    _addTool: function ( tool ) {
        var id = tool.id;
        var self = this;
        this.tools[ id ] = tool;

        $( this.toolsContainer ).append( tool.button );
        tool.button.on('click', function () { self.activateTool( id ); })
        tool.button.on('mousedown', function () { return false; });
    },

    _createToolBase: function ( spec ) {
        var button = $(
            '<div class="button">' +
                '<img src="' + spec.img + '" />' +
                '<div>' + spec.label + '</div>' +
            '</div>');

        return { id: spec.id, button: button };
    },

    _createMarkerTool: function ( spec ) {
        var self = this;
        var tool = this._createToolBase( spec );

        var phase_down = function (e) {
            console.log( "Phase down" );
            tool.marker.start = e.latlng;
            tool.marker.path = [ e.latlng ];
            self.map.map.off( 'mousedown', phase_down );
            self.map.map.on( 'mouseup', phase_up );
        };

        var phase_track = function (e) {
            console.log( "Phase track" );
            tool.marker.path.push( e.latlng );
        };

        var phase_up = function (e) {
            console.log( "Phase up" );
            self.map.map.off( 'mouseup', phase_up );

            tool.marker.path.push( e.latlng );
            var id = null;
            if( spec.single ) id = self.map.player + "-" + spec.id;
            else id = self.map.player + "-" + Date.now();

            self.map.onAddMarker( new MarkerModel({
                id: id,
                player: self.map.player.id,
                location: tool.marker.start,
                img: spec.img || 'trident.png'
            }) );

            tool.activate();
        };

        tool.activate = function () {
            self.map.map.dragging.disable();
            tool.marker = { img: spec.img };
            self.map.map.on( 'mousedown', phase_down );
        };

        tool.deactivate = function () {
            self.map.map.dragging.enable();
            tool.marker = null;
            self.map.map.off( 'mousedown', phase_down );
            self.map.map.off( 'mouseup', phase_up );
        };

        return tool;
    }
});

module.exports = EditControls;
