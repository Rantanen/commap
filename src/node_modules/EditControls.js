
/*global L, $, prompt */
"use strict";

var MarkerModel = require('MarkerModel');

var EditControls = L.Control.extend({
    options: {
        position: 'topleft'
    },

    initialize: function ( map ) {
        this.tools = [];
        this.map = map;
    },

    update: function () {
        this.defaultPlatoon.setIcon( this.map.player.info.outfit.icon );
    },

    onAdd: function () {
        this.toolsContainer = L.DomUtil.create( 'div', 'map-controls' );
        var self = this;

        this.controls = $('<div class="toolbar-controls">');
        var container = $(this.toolsContainer);
        container.append(
            $('<div class="toolbar-top-left">'),
            $('<div class="toolbar-middle">'),
            $('<div class="toolbar-bottom">'),
            this.controls
        );

        this.controls.append( $('<div class="toolbar-title">').text( "Tools" ) );

        var generalCategory = this.createCategory( null );
        this.controls.append( generalCategory.category );

        self._addTool( generalCategory, self._createToolBase({ id: 'pan', label: 'Pan', img: 'pan.png' }) );
        self._addTool( generalCategory, this._createPenTool() );

        var factionCategory = this.createCategory( "Empire markers" );
        this.controls.append( factionCategory.category );

        var personalCategory = this.createCategory( "Personal markers" );
        this.controls.append( personalCategory.category );

        var marker_tools = [
            { id: 'place_terran', label: 'Terran', img: 'tr.png' },
            { id: 'place_nc', label: 'NC', img: 'nc.png' },
            { id: 'place_vanu', label: 'Vanu', img: 'vs.png' }
        ];

        $.each( marker_tools, function( k, spec ) {
            var tool = self._createMarkerTool( spec );
            self._addTool( factionCategory, tool );
        });

        var newPlatoonTool = self._createToolBase({ id: 'add_platoon', label: 'New platoon', img: 'default.png' });
        newPlatoonTool.activate = function () {
            var name = prompt("Platoon name");
            if( name ) {
                var platoonTool = self._createPlatoonControl( personalCategory, name );
                self.activateTool( platoonTool.id );
                this.controls.append( newPlatoonTool.button );
            } else {
                self.activateTool( 'pan' );
            }
        };

        this.defaultPlatoon = this._createPlatoonControl( personalCategory, this.map.player.info.name );
        // self._addTool( newPlatoonTool );


        var clearAll = self._createToolBase({ id: 'clear_all', label: 'Clear All', img: 'default.png' });
        clearAll.activate = function () {
            var removables = [];
            for( var k in self.map.markers ) {
                var markerInfo = self.map.markers[ k ];
                if( markerInfo.model.mine ) { removables.push( markerInfo ); }
            }
            for( var i in removables ) {
                self.map.onRemoveMarker( removables[i].model );
            }
            self.activateTool( 'pan' );
        };
        self._addTool( generalCategory, clearAll );

        self.activateTool( 'pan' );
        return this.toolsContainer;
    },

    createCategory: function( name ) {
        var category = $('<div class="control-category">');
        if( name ) {
            category.append( $('<div class="control-category-label">').text( name ) );
        }
        var container = $('<div class="control-container">');

        category.append( container, '<div style="clear:both" />' );
        return {
            category: category,
            container: container
        };
    },

    _createPenTool: function () {
        var self = this;

        var penTool = this._createToolBase({ id: 'pen', label: 'Pen', img: 'pen.png' });
        penTool.activate = function () {
            self.map.map.dragging.disable();
            self.map.map.on( 'mousedown', pen_down );
        };

        penTool.deactivate = function () {
            self.map.map.dragging.enable();
            self.map.map.off( 'mousedown', pen_down );
            self.map.map.off( 'mouseup', pen_up );
            self.map.map.off( 'mouseup', pen_track );
        };

        var penInterval = null;
        var pen_down = function (e) {
            penTool.previous = e.latlng;
            penTool.next = e.latlng;
            self.map.map.off( 'mousedown', pen_down );
            self.map.map.on( 'mouseup', pen_up );
            self.map.map.on( 'mousemove', pen_track );
            penInterval = setInterval( pen_send, 20 );
        };

        var pen_track = function (e) {
            penTool.next = e.latlng;
        };

        var pen_up = function (e) {
            self.map.map.on( 'mousedown', pen_down );
            self.map.map.off( 'mouseup', pen_up );
            self.map.map.off( 'mouseup', pen_track );
            clearInterval( penInterval );
        };

        var pen_send = function (e) {
            if( penTool.next.lat === penTool.previous.lat &&
                penTool.next.lng === penTool.previous.lng ) {
                return;
            }

            self.map.onDraw( penTool.previous, penTool.next );
            penTool.previous = penTool.next;
        };

        return penTool;
    },

    _createPlatoonControl: function( category, name ) {
        var platoonTool = this._createMarkerTool({
            id: 'platoon_' + name,
            label: name,
            img: 'default.png',
            unique: true
        });
        this._addTool( category, platoonTool );
        return platoonTool;
    },

    activateTool: function (id) {
        if( this.selectedTool && this.selectedTool.id === id ) { return; }
        if( this.selectedTool ) {
            this.selectedTool.button.removeClass( "active" );
            if( this.selectedTool.deactivate ) { this.selectedTool.deactivate(); }
        }

        this.selectedTool = this.tools[ id ];
        this.selectedTool.button.addClass( "active" );
        if( this.selectedTool.activate ) { this.selectedTool.activate(); }
    },

    _addTool: function ( category, tool ) {
        var id = tool.id;
        var self = this;
        this.tools[ id ] = tool;

        category.container.append( tool.button );
        tool.button.on('click', function () { self.activateTool( id ); });
        tool.button.on('mousedown', function () { return false; });
    },

    _createToolBase: function ( spec ) {
        var button = $(
            '<div class="button">' +
                '<img src="' + spec.img + '" />' +
                '<div class="button-label">' + spec.label + '</div>' +
            '</div>');

        var tool = {
            id: spec.id,
            button: button,
            setIcon: function (url) { button.children('img').attr( "src", url ); tool.url = url; },
            setText: function (text) { button.children('div').text( text ); tool.text = text; }
        };

        return tool;
    },

    _createMarkerTool: function ( spec ) {
        var self = this;
        var tool = this._createToolBase( spec );

        var phase_down = function (e) {
            tool.spec.start = e.latlng;
            tool.spec.path = [ e.latlng ];
            self.map.map.off( 'mousedown', phase_down );
            self.map.map.on( 'mouseup', phase_up );
        };

        var phase_up = function (e) {
            self.map.map.off( 'mouseup', phase_up );

            tool.spec.path.push( e.latlng );
            var id = null;
            if( spec.unique ) { id = self.map.player.id + "-" + spec.id; }
            else { id = self.map.player.id + "-" + Date.now(); }

            var marker = new MarkerModel({
                id: id,
                player: self.map.player.id,
                location: tool.spec.start,
                unique: !!spec.unique,
                img: spec.img || 'default.png'
            });

            if( spec.unique ) {
                tool.marker = marker;
            }

            marker.continent = self.map.continent;
            self.map.onUpdateMarker( marker );
            self.activateTool( 'pan' );
        };

        tool.activate = function () {
            self.map.map.dragging.disable();
            tool.spec = { img: spec.img };
            self.map.map.on( 'mousedown', phase_down );
        };

        tool.deactivate = function () {
            self.map.map.dragging.enable();
            tool.spec = null;
            self.map.map.off( 'mousedown', phase_down );
            self.map.map.off( 'mouseup', phase_up );
        };

        var superSetIcon = tool.setIcon;
        tool.setIcon = function (url) {
            superSetIcon(url);
            spec.img = url;
            if( tool.marker ) {
                tool.marker.img = url;
                self.map.onUpdateMarker( tool.marker );
            }
        };

        return tool;
    }
});

module.exports = EditControls;
