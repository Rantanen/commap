
"use strict";

var MapMarker = require('MapMarker');
var MarkerModel = require('MarkerModel');
var EditControls = require('EditControls');

/*global $, L */

var setStatus = function(s) { $('#map-status').text(s); };

var Map = function ( model, loginCb ) {
    this.model = model;

    // Create the map.
    $('#map').remove();
    var mapElement = $('<div id="map">');
    $('#map-layer').append( mapElement );
    this.map = L.map('map', { minZoom: 0, maxZoom: 5, crs: L.CRS.Simple, zoomControl: false }).setView([-128,128], 2);
    this.layerControls = L.control.layers( {}, {}, { collapsed: false }).addTo( this.map );

    // Initialize the members.
    this.playerOverlays = {};
    this.markers = {};

    // Initialize the map itself.
    this.createContinents( model.data.continents );

    for( var i in model.data.players ) {
        var player = model.data.players[i];
        this.updatePlayer( player );
    }

    var self = this;
    this.model.on( 'playerupdated', function (player) { self.updatePlayer( player ); } );
    this.model.on( 'markerupdated', function (marker) { self.updateMarker( marker ); } );
};

Map.prototype.setPlayer = function( player, server ) {
    this.player = player;
    this.server = server;

    // Create and add edit controls.
    this.editControls = new EditControls( this ).addTo( this.map );
}

Map.prototype.createContinents = function( continents ) {
    this.continents = {};

    for( var i in continents ) {
        var continent = continents[i];
        var layer = L.tileLayer( '/maps/' + continent + '/{z}/{x}/{y}.jpg', {
            tms: true,
            noWrap: true
        });

        if( !this.selectedContinent ) {
            this.selectedContinent = continent;
            layer.addTo( this.map );
        }

        this.layerControls.addBaseLayer( layer, continent );
        this.continents[ continent ] = layer;
    }
};

Map.prototype.updatePlayer = function( player ) {
    console.log("Update player");
    var self = this;
    var overlay = null;

    if( this.playerOverlays[ player.id ] ) {
        overlay = this.playerOverlays[ player.id ];
        overlay.eachLayer( function( marker ) {
            delete self.markers[ marker.id ];
        });
        overlay.clearLayers();
    }

    if( !overlay ) {
        overlay = L.layerGroup().addTo( this.map );
        if( this.player !== player )
            this.layerControls.addOverlay( overlay, player.name );
        this.playerOverlays[ player.id ] = overlay;
    } else {
        if( this.player === player )
            this.layerControls.removeLayer( overlay );
    }

    for( var m in player.markers ) 
    {
        var markerModel = player.markers[ m ];
        this.updateMarker( player.markers[ m ] );
    }
};

Map.prototype.updateMarker = function( model ) {
    var self = this;

    var layer = this.playerOverlays[ model.player ];
    if( !layer ) return;

    var marker = null;
    if( this.markers[ model.id ] ) {

        marker = this.markers[ model.id ];
        marker.update( model );

    } else {

        marker = new MapMarker( model ).addTo( layer );
        marker.on('remove', function ( model ) { self.onRemoveMarker( model ); } );
        marker.on('moved', function ( data ) { self.server.updateMarker( data.model ); });
        this.markers[ model.id ] = marker;
    }
};

Map.prototype.onAddMarker = function( marker ) {
    this.model.updateMarker( marker );
    this.server.updateMarker( marker );
};

Map.prototype.onRemoveMarker = function( marker ) {
    this.server.removeMarker( marker.player, marker.id );
    this.removeMarker( marker.player, marker.id );
};

Map.prototype.removeMarker = function( owner, id ) {
    var marker = this.markers[ id ];
    var layer = this.playerOverlays[ owner ];
    layer.removeLayer( marker );
    delete this.markers[ id ]
};

Map.prototype.addMarker = function( marker ) {
};

module.exports = Map;
