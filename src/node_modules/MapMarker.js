
var MapMarker = L.LayerGroup.extend({
    includes: L.Mixin.Events,

    initialize: function ( model ) {

        var self = this;
        this.model = model;
        debugger;
        this.controllable = !model.unique || model.mine;

        this.icon = L.marker( model.location, {
            draggable: this.controllable,
            icon: L.icon({
                iconUrl: model.img,
                iconSize: [ 64, 64 ],
                iconAnchor: [ 32, 32 ]
            })
        });
        this.icon.img = model.img;

        var self = this;
        this.icon.on('dragstart', function () {
            if( self.controls ) {
                self.removeLayer( self.controls );
                self.controls = null;
            }
        });

        this.icon.on('dragend', function () {
            var loc = self.icon.getLatLng();
            self.model.location = loc;
            self.drawControls( loc );
            self.fire( 'moved', { model: self.model } );
        });


        var layers = [ this.icon ];
        L.LayerGroup.prototype.initialize.call( this, layers );

        this.drawControls( model.location );

        this.id = model.id;
    },

    update: function( model ) {
        var self = this;
        model = model || this.model;

        var oldLocation = this.model.location;
        var newLocation = model.location;
        this.model = model;

        if( oldLocation.lat !== newLocation.lat || oldLocation.lng !== newLocation.lng ) {
            this.animateMove( oldLocation, newLocation, function () {
                self.drawControls( self.model.location );
            });
        }

        if( model.img !== this.icon.img ) {
            this.icon.setIcon(L.icon({
                iconUrl: model.img,
                iconSize: [ 64, 64 ],
                iconAnchor: [ 32, 32 ]
            }));
        }

    },

    animateMove: function( oldLocation, newLocation, cb ) {
        var self = this;
        oldLocation = [ oldLocation.lat, oldLocation.lng ];
        newLocation = [ newLocation.lat, newLocation.lng ];

        if( this.animateInterval ) clearInterval( this.animateInterval );

        // Calculate distance.
        var delta = [ newLocation[0] - oldLocation[0], newLocation[1] - oldLocation[1] ];
        var distance = Math.sqrt( delta[0]*delta[0] + delta[1]*delta[1] );

        var steps = Math.ceil(distance / 2);
        var currentStep = 0;

        this.animateInterval = setInterval( function () {
            currentStep++;
            var progress = currentStep / steps;
            if( progress >= 1 )
            {
                self.icon.setLatLng( newLocation );
                self.drawControls( newLocation );
                clearInterval( self.animateInterval );
                self.animateInterval = null;
                cb();
            } else {
                var location = [ oldLocation[0] + delta[0]*progress, oldLocation[1] + delta[1]*progress ];
                self.icon.setLatLng( location );
                self.drawControls( location );
            }
        }, 10);
    },

    drawControls: function( location ) {
        var self = this;
        var controls = this.controls;
        if( !controls ) {
            this.removeControl = null;
            this.ownerControl = null;

            controls = L.layerGroup();
            this.addLayer( controls );
            this.controls = controls;
        }


        if( this.controllable ) {

            if( !this.removeControl ) {
                this.removeControl = L.marker( location, {
                    zIndexOffset: 1000,
                    icon: L.icon({
                        iconUrl: "erase.png",
                        iconSize: [ 16, 16 ],
                        iconAnchor: [ -16, 32 ]
                    })
                });
                this.removeControl.on( 'click', function () { self.fireEvent( 'remove', self.model ); });
                this.removeControl.on( 'mousedown', function(e) { L.DomEvent.stopPropagation( e.originalEvent ); } );

                controls.addLayer( this.removeControl );
            } else {
                this.removeControl.setLatLng( location );
            }
        }

        if( !this.ownerControl ) {
            this.ownerControl = L.marker( location, {
                zIndexOffset: 1000,
                icon: L.divIcon({
                    iconAnchor: [ -8, -8 ],
                    html: this.model.player,
                    className: 'map-owner-label'
                })
            });

            controls.addLayer( this.ownerControl );
        } else {
            this.ownerControl.setLatLng( location );
        }

    }
});

module.exports = MapMarker;

