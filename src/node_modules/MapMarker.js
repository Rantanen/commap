
/*global L */
"use strict";

var TargetArrow = require('TargetArrow');

var MapMarker = L.LayerGroup.extend({
    includes: L.Mixin.Events,

    initialize: function ( model, canInteract ) {

        var self = this;
        this.model = model;
        this.canInteract = canInteract;
        this.controllable = canInteract && (!model.unique || model.mine);

        this.icon = L.marker( model.location, {
            draggable: this.controllable,
            icon: L.icon({
                iconUrl: model.img,
                iconSize: [ 64, 64 ],
                iconAnchor: [ 32, 32 ]
            })
        });
        this.icon.img = model.img;

        this.icon.on('dragstart', function () {
            if( self.controls ) {
                self.removeLayer( self.controls );
                self.controls = null;
            }
            self.clearSuggestions( true );
            self.clearTarget( true );
        });

        this.icon.on('dragend', function () {
            var loc = self.icon.getLatLng();
            self.model.location = loc;
            self.model.target = null;
            self.drawControls( loc );
            self.fire( 'moved', { model: self.model } );
        });

        this.suggestionLayer = L.layerGroup();

        var layers = [ this.icon, this.suggestionLayer ];
        L.LayerGroup.prototype.initialize.call( this, layers );

        this.drawControls( model.location );

        this.id = model.id;
        this.suggestions = {};
        if( model.target ) {
            this.setTarget( model.target );
        }
    },

    setCanInteract: function( value ) {
        this.canInteract = value;
        this.update();
    },

    update: function( model ) {
        var self = this;
        model = model || this.model;

        var oldLocation = this.model.location;
        var newLocation = model.location;

        var oldTarget = this.model.target;
        var newTarget = model.target;
        this.model = model;
        this.controllable = this.canInteract && (!model.unique || model.mine);
        self.drawControls( self.model.location );
        if( this.controllable ) {
            debugger;
            this.icon.dragging.enable();
        } else {
            debugger;
            this.icon.dragging.disable();
        }

        if( oldLocation.lat !== newLocation.lat || oldLocation.lng !== newLocation.lng ) {
            this.animateMove( oldLocation, newLocation, function () {
                self.drawControls( self.model.location );
            });
        } else if ( newTarget ) {
            self.setTarget( newTarget );
        } else if ( !newTarget && self.targetArrow ) {
            var arrow = self.targetArrow;
            self.targetArrow.animateHide( 0, 100, function () {
                self.controls.removeLayer( arrow );
            });
            self.targetArrow = null;
        }

        if( model.img !== this.icon.img ) {
            this.icon.setIcon(L.icon({
                iconUrl: model.img,
                iconSize: [ 64, 64 ],
                iconAnchor: [ 32, 32 ]
            }));
        }

    },

    setTarget: function( target ) {
        this.clearSuggestions();
        if( this.targetArrow ) {
            if( this.targetArrow.update( target ) ) {
                this.clearSuggestions( true );
            }
        } else {
            this.targetArrow = new TargetArrow( this.model.location, 'green', 0.8).addTo( this );
            this.targetArrow.animateMove( target );
            this.clearSuggestions( true );
        }
    },

    animateMove: function( oldLocation, newLocation, cb ) {
        var self = this;
        oldLocation = [ oldLocation.lat, oldLocation.lng ];
        newLocation = [ newLocation.lat, newLocation.lng ];

        if( this.animateInterval ) { clearInterval( this.animateInterval ); }
        this.clearSuggestions( true );
        this.clearTarget( true );

        // Calculate distance.
        var delta = [ newLocation[0] - oldLocation[0], newLocation[1] - oldLocation[1] ];
        var distance = Math.sqrt( delta[0]*delta[0] + delta[1]*delta[1] );

        var steps = Math.ceil(distance * 100);
        var currentStep = 0;

        this.animateInterval = setInterval( function () {
            currentStep++;
            var progress = currentStep / steps;
            if( progress >= 1 )
            {
                self.icon.setLatLng( newLocation );
                self.drawControls( newLocation );
                clearInterval( self.animateInterval );
                self.animateInterval = null;
                cb();
            } else {
                var location = [ oldLocation[0] + delta[0]*progress, oldLocation[1] + delta[1]*progress ];
                self.icon.setLatLng( location );
                self.drawControls( location );
            }
        }, 10);
    },

    drawControls: function( location ) {
        var self = this;
        var controls = this.controls;
        location = location || this.icon.getLatLng();

        if( !controls ) {
            this.removeControl = null;
            this.ownerControl = null;
            this.targetControl = null;
            this.targetArrow = null;

            controls = L.layerGroup();
            this.addLayer( controls );
            this.controls = controls;
        }


        if( this.controllable ) {

            if( !this.removeControl ) {
                this.removeControl = L.marker( location, {
                    zIndexOffset: 1000,
                    icon: L.icon({
                        iconUrl: "erase.png",
                        iconSize: [ 16, 16 ],
                        iconAnchor: [ -16, 32 ]
                    })
                });
                this.removeControl.on( 'click', function () { self.fireEvent( 'remove', self.model ); });
                this.removeControl.on( 'mousedown', function(e) { L.DomEvent.stopPropagation( e.originalEvent ); } );

                controls.addLayer( this.removeControl );
            } else {
                this.removeControl.setLatLng( location );
            }
        } else {
            if( this.removeControl ) {
                controls.removeLayer( this.removeControl );
                this.removeControl = null;
            }
        }

        if( !this.ownerControl ) {
            this.ownerControl = L.marker( location, {
                zIndexOffset: 1000,
                icon: L.divIcon({
                    iconAnchor: [ -8, -8 ],
                    html: this.model.player,
                    className: 'map-owner-label'
                })
            });

            controls.addLayer( this.ownerControl );
        } else {
            this.ownerControl.setLatLng( location );
        }

        if( this.canInteract ) {
            if( !this.targetControl ) {
                this.targetControl = L.marker( location, {
                    zIndexOffset: 1000,
                    draggable: true,
                    icon: L.icon({
                        iconUrl: "target.png",
                        iconSize: [ 24, 24 ],
                        iconAnchor: [ 40, -8 ]
                    })
                });

                this.targetControl.on('dragstart', function () {
                    self.targetControl.arrow = new TargetArrow( self.icon.getLatLng(), 'white', 0.5).addTo( controls );
                });

                this.targetControl.on('drag', function () {
                    self.targetControl.arrow.move( self.targetControl.getLatLng() );
                });

                this.targetControl.on('dragend', function () {
                    self.fireEvent( 'addTarget', {
                        model: self.model,
                        location: self.targetControl.getLatLng()
                    });

                    var arrow = self.targetControl.arrow;
                    arrow.finishMove( self.targetControl.getLatLng() );
                    arrow.animateHide( 0, 500, function () {
                        controls.removeLayer( arrow );
                    });
                    self.targetControl.arrow = null;

                    self.targetControl.setLatLng( self.icon.getLatLng() );
                });

                controls.addLayer( this.targetControl );
            } else {
                this.targetControl.setLatLng( location );
            }
        } else {
            if( this.targetControl ) {
                controls.removeLayer( this.targetControl );
                this.targetControl = null;
            }
        }
    },

    clearTarget: function ( fade ) {
        if( !this.targetArrow ) { return; }

        var self = this;
        if( fade ) {
            var arrow = this.targetArrow;
            arrow.animateHide( 0, 250, function () { self.removeLayer( arrow ); });
        } else {
            this.removeLayer( this.targetArrow );
        }
        this.targetArrow = null;
    },

    clearSuggestions: function ( fade ) {
        var self = this;
        if( fade ) {
            for( var i in this.suggestions ) {
                var suggestion = this.suggestions[ i ];
                suggestion.animateHide( 0, 250, function () { self.suggestionLayer.removeLayer( suggestion ); });
            }
        } else {
            this.suggestionLayer.clearLayers();
        }
        this.suggestions = {};
    },

    suggestTarget: function( location, player ) {
        var self = this;
        if( this.suggestions[ player ] ) {
            this.suggestions[ player ].animateMove( location );
            this.suggestions[ player ].animateHide( 15000, 5000, function () { self.suggestions[ player ] = null; });
        } else {
            var acceptCb = self.controllable ? function ( target ) {
                    self.fireEvent( 'addTarget', { model: self.model, location: target } );
                } : null;
            var rejectCb = self.controllable ? function ( target ) {
                    self.removeSuggestion( player );
                    self.fireEvent( 'rejectSuggestion', { model: self.model, player: player } );
                } : null;
            var s = new TargetArrow(
                this.icon.getLatLng(), "lightblue", 0.4, player || null, acceptCb, rejectCb ).addTo( this.suggestionLayer );
            s.animateMove( location );
            s.animateHide( 15000, 5000, function () { self.suggestions[ player ] = null; });
            this.suggestions[ player ] = s;
        }
    },

    removeSuggestion: function( player ) {
        var self = this;
        var suggestion = this.suggestions[ player ];
        if( !suggestion ) { return; }
        suggestion.animateHide( 0, 250, function () { self.suggestions[ player ] = null; });
    }
});

module.exports = MapMarker;

