
/*global L */
"use strict";

var TargetArrow = L.LayerGroup.extend({
    initialize: function( base, color, opacity, player, acceptCb, declineCb ) {
        this.base = base;
        this.point = base;
        this.startOpacity = opacity;
        this.arrow = L.polyline( base, {
            fill: true,
            stroke: false,
            fillColor: color,
            fillOpacity: this.startOpacity,
            zIndex: 100
        });
        this.player = player;
        this.acceptCb = acceptCb;
        this.declineCb = declineCb;

        L.LayerGroup.prototype.initialize.call( this, [ this.arrow ] );
    },

    onAdd: function( map ) {
        this.map = map;
        L.LayerGroup.prototype.onAdd.call( this, map );
    },

    update: function( target ) {
        if( this.point.lat === target.lat && this.point.lng === target.lng ) {
            return;
        }

        this.animateMove( target );
    },

    animateHide: function( delay, speed, cb ) {
        var self = this;
        if( this.hideTimeout ) {
            clearTimeout( this.hideTimeout );
            this.hideTimeout = null;
        }
        if( this.hideInterval ) {
            clearInterval( this.hideInterval );
            self.arrow.setStyle({ fillOpacity: this.startOpacity });
            this.hideInterval = null;
        }

        this.hideTimeout = setTimeout( function () {
            var steps = speed / 10;
            var opacity = self.arrow.options.fillOpacity;
            var delta = opacity / steps;
            self.hideInterval = setInterval( function () {
                opacity -= delta;
                if( opacity <= 0 ) {
                    self.map.removeLayer( self );
                    clearInterval( self.hideInterval );
                    cb();
                }
                self.arrow.setStyle({ fillOpacity: opacity });

            }, 10 );
        }, delay );
    },

    animateMove: function( newPoint ) {
        if( this.moveInterval ) {
            clearInterval( this.moveInterval );
            this.moveInterval = null;
        }

        var self = this;
        var vector = [ newPoint.lat - this.point.lat, newPoint.lng - this.point.lng ];

        var distance = Math.sqrt(
            Math.pow( vector[0], 2 ) +
            Math.pow( vector[1], 2 )
        );

        var steps = distance * 75;
        var step = 0;
        var start = this.point;

        this.moveInterval = setInterval( function () {
            var progress = step / steps;
            if( progress >= 1 ) {
                self.finishMove( newPoint );
                clearInterval( self.moveInterval );
            } else {
                var point = {
                    lat: start.lat + vector[0] * progress,
                    lng: start.lng + vector[1] * progress
                };
                self.move( point );
            }
            step++;
        }, 10 );
    },

    move: function( point ) {
        var vector = [
            point.lat - this.base.lat,
            point.lng - this.base.lng
        ];

        var length = Math.sqrt( Math.pow(vector[0], 2) + Math.pow(vector[1], 2) );
        if( length === 0 ) {
            this.arrow.setLatLngs( [ this.base ] );
            return;
        }

        var unitVector = [
            vector[0] / length,
            vector[1] / length
        ];

        var perpendicular = [
            -unitVector[1],
            unitVector[0]
        ];

        var arrowBase = function( base, vOffset, vGap, length ) {
            return base + vOffset * 0.01 + vGap * Math.sqrt( length ) * 0.02;
        };

        var latlngs = [
            [
                arrowBase( this.base.lat, perpendicular[0], unitVector[0], length ),
                arrowBase( this.base.lng, perpendicular[1], unitVector[1], length )
            ],
            point,
            [
                arrowBase( this.base.lat, -perpendicular[0], unitVector[0], length ),
                arrowBase( this.base.lng, -perpendicular[1], unitVector[1], length )
            ],
            [
                arrowBase( this.base.lat, perpendicular[0], unitVector[0], length ),
                arrowBase( this.base.lng, perpendicular[1], unitVector[1], length )
            ]
        ];

        this.point = point;

        var distance = Math.sqrt(
            Math.pow( this.point.lat - this.base.lat, 2 ),
            Math.pow( this.point.lng - this.base.lng, 2 )
        );

        var middle = [
            this.base.lat + (this.point.lat - this.base.lat) * (0.5 + 0.5 / (distance * 100 + 1)),
            this.base.lng + (this.point.lng - this.base.lng) * (0.5 + 0.5 / (distance * 100 + 1))
        ];

        this.arrow.setLatLngs( latlngs ) ;
        if( this.ownerLayer ) {
            this.ownerLayer.setLatLng( middle );
        }
        if( this.acceptLayer ) {
            this.acceptLayer.setLatLng( middle );
        }
        if( this.declineLayer ) {
            this.declineLayer.setLatLng( middle );
        }
    },

    finishMove: function( point ) {
        var self = this;
        this.move( point );
        if( !this.player ) { return; }

        var distance = Math.sqrt(
            Math.pow( this.point.lat - this.base.lat, 2 ),
            Math.pow( this.point.lng - this.base.lng, 2 )
        );

        var middle = [
            this.base.lat + (this.point.lat - this.base.lat) * (0.5 + 0.5 / (distance * 100 + 1)),
            this.base.lng + (this.point.lng - this.base.lng) * (0.5 + 0.5 / (distance * 100 + 1))
        ];

        if( this.player ) {
            if( !this.ownerLayer ) {
                this.ownerLayer = L.marker( middle, {
                    zIndexOffset: 1000,
                    icon: L.divIcon({
                        iconAnchor: [ 0, 16 ],
                        html: this.player,
                        className: 'map-owner-label'
                    })
                });

                this.addLayer( this.ownerLayer );
            } else {
                this.ownerLayer.setLatLng( middle );
            }
        }

        if( this.acceptCb ) {
            if( !this.acceptLayer ) {
                this.acceptLayer = L.marker( middle, {
                    zIndexOffset: 1000,
                    icon: L.icon({
                        iconUrl: "accept.png",
                        iconSize: [ 16, 16 ],
                        iconAnchor: [ -26, -8 ]
                    })
                }).addTo( this );

                L.DomEvent.disableClickPropagation( this.acceptLayer._icon );
                this.acceptLayer.on( 'click', function ( e ) {
                    self.acceptCb( self.point );
                    self.removeLayer( self.acceptLayer );
                    self.acceptLayer = null;

                    if( self.declineLayer ) {
                        self.removeLayer( self.declineLayer );
                        self.declineLayer = null;
                    }
                    L.DomEvent.stopPropagation( e.originalEvent );
                });
            } else {
                this.acceptLayer.setLatLng( middle );
            }

        }

        if( this.declineCb ) {
            if( !this.declineLayer ) {
                this.declineLayer = L.marker( middle, {
                    zIndexOffset: 1000,
                    icon: L.icon({
                        iconUrl: "reject.png",
                        iconSize: [ 16, 16 ],
                        iconAnchor: [ 0, -8 ]
                    })
                }).addTo( this );

                L.DomEvent.disableClickPropagation( this.declineLayer._icon );
                this.declineLayer.on( 'click', function ( e ) {
                    self.declineCb( self.point );
                    self.removeLayer( self.declineLayer );
                    self.declineLayer = null;

                    if( self.acceptLayer ) {
                        self.removeLayer( self.acceptLayer );
                        self.acceptLayer = null;
                    }
                    L.DomEvent.stopPropagation( e.originalEvent );
                });

            } else {
                this.declineLayer.setLatLng( middle );
            }
        }

    }

});

module.exports = TargetArrow;


