
"use strict";

var Player = require('Player');
var MapModel = require('MapModel');

var log = require('util').log;

if (environment === 'server') {
}

var WebServer = function (server) {
    var self = this;
    this.server = server;
    this.players = {};
    this.map = new MapModel();
};

WebServer.prototype.connect = function (client) {
    log( "Client connected.", client );
    client.connected( this.map.data, {
        sides: [
            {
                name: 'Vanu',
                icon: 'vs.png'
            },
            {
                name: 'Terran',
                icon: 'tr.png'
            },
            {
                name: 'New Conglomerate',
                icon: 'nc.png'
            }
        ],
        outfits: {
            none: {
                name: '(no outfit)',
                icon: 'default.png'
            },
            trid: {
                name: 'Trident',
                tag: '[TRID]',
                icon: 'trident.png'
            },
            ownd: {
                name: 'Epic',
                tag: '[OWND]',
                icon: 'ownd.png'
            },
            ptmc: {
                name: 'Phantom Company',
                tag: '[PTMC]',
                icon: 'ptmc.png'
            }
        }
    });
};

WebServer.prototype.disconnect = function (client) {
    if( client.purgeTimer ) {
        clearTimeout( client.purgeTimer );
    }
    client.player = null;
};

WebServer.prototype.logIn = function (client, name, cb) {
    if( !cb ) { return; }

    client.name = name;
    if( !this.players[ name ] ) {
        this.players[ name ] = new Player( name, name );
        this.map.updatePlayer( this.players[ name ] );
        client.broadcast.updatePlayer( this.players[ name ] );
    }

    console.log( name + " logged in." );
    cb( this.players[ name ] );
    this.ping( client );
};

WebServer.prototype.updateMarker = function (client, marker) {
    log( client.name + " updated marker " + marker.id );
    this.map.updateMarker( marker );
    client.broadcast.updateMarker( marker );
};

WebServer.prototype.removeMarker = function (client, owner, markerId) {
    log( "Removing marker: " + markerId + " (" + owner + ")");
    delete this.players[ owner ].markers[ markerId ];
    client.broadcast.removeMarker( owner, markerId );
};

WebServer.prototype.updatePlayer = function (client, player) {
    if( !this.players[ player.id ] ) {
        log( "Got update for nonexistant player " + player.id );
        return;
    }

    log( "Received update for player " + player.id );

    for( var k in player ) {
        this.players[ player.id ][ k ] = player[ k ];
    }
    client.broadcast.updatePlayer( player );
};

WebServer.prototype.draw = function (client, start, end) {
    client.broadcast.draw( start, end );
};

WebServer.prototype.ping = function (client) {
    if( !client.purgeTimer ) {
        log( "Client without purge timer: " + client.id );
    } else {
        clearTimeout( client.purgeTimer );
    }

    console.log( 'Ping: ' + client.id );

    var self = this;
    var name = client.name;
    client.purgeTimer = setTimeout( function () {
        log( 'Ping timeout: ' + client.id );
        self.removePlayer( null, name );
    }, 5000 );
};

WebServer.prototype.removePlayer = function (client, player ) {
    if( !this.players[ player ] ) { return; }
    delete this.players[ player ];
    this.map.removePlayer( player );

    var channel = client ? client.broadcast : this.clients;
    channel.removePlayer( player );
};


module.exports = WebServer;

