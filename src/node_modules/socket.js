
/*global io, alert */
"use strict";

var createProxyFunction = function (socket, name, modifier) {
    return function (cb) {
        var args = [ name ];
        for (var i in arguments) { args.push(arguments[i]); }

        if (modifier) {
            socket.flags[modifier] = true;
        }
        socket.emit.apply(socket, args);
    };
};

// Proxy for relaying function calls over the socket.
//
// Each function on the prototype gets a function on
// the proxy object. These functions take one data variable
// which is sent over the socket.
var Proxy = function (socket, prototype) {
    this.socket = socket;
    this.broadcast = {};
    this.volatile = {};

    if (socket.handshake) {
        this.session = socket.handshake.session;
    }

    var ns = prototype.socketNamespace ? prototype.socketNamespace + '.' : '';

    for (var k in prototype) {
        if (prototype.hasOwnProperty(k)) {
            var func = prototype[k];
            if (typeof func === 'function') {
                this[k] = createProxyFunction(socket, ns + k);
                this.broadcast[k] = createProxyFunction(socket, ns + k, 'broadcast');
                this.volatile[k] = createProxyFunction(socket, ns + k, 'volatile');
            }
        }
    }
};

var createListenerFunction = function (handler, name, proxy) {
    return function () {
        var args = [ proxy ];
        for (var i in arguments) { args.push(arguments[i]); }
        handler[name].apply(handler, args);
    };
};

// Registers a 'handler' as a listener for the socket.
// 
// All the functions defined on the handler get their own endpoint
// on the socket and all events on this endpoint cause a call to
// the handler with the proxy as a parameter.
//
// 'socket' represents one server or one client connection.
// 'handler' is an object that handles the messages coming from the sokcet.
// 'proxy' represents the interface provided by the sender of the events.
var registerListener = function (socket, handler, proxy) {

    var ns = handler.socketNamespace ? handler.socketNamespace + '.' : '';

    for (var k in handler) {
        var func = handler[k];
        if (typeof func === 'function') {
            socket.on(ns + k, createListenerFunction(handler, k, proxy));
        }
    }
};

exports.listen = function (app, handler, clientPrototype) {

    var io = require('socket.io');
    var sio = io.listen(app);
    sio.set('log level', 1);

    var connectionId = 0;
    sio.sockets.on('connection', function (socket) {

        var id = connectionId;
        connectionId++;
        console.log('New connection: ' + id);

        var conn = new Proxy(socket, clientPrototype);
        conn.id = id;

        registerListener(socket, handler, conn);

        handler.connect(conn);

        socket.on('disconnect', function (socket) {
            console.log('Connection lost: ' + id);
            handler.disconnect(conn);
        });
    });

    var clients = new Proxy(sio.sockets, clientPrototype);
    handler.clients = clients;
    return clients;
};

exports.connect = function (host, handler, serverPrototype) {

    var socket = io.connect(host);

    var conn = new Proxy(socket, serverPrototype);

    registerListener(socket, handler, conn);
    handler.server = conn;

    return conn;
};

